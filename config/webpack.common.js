'use strict';

const CleanWebpackPlugin   = require('clean-webpack-plugin');

const CopyWebpackPlugin = require('copy-webpack-plugin');

/* Generates an HTML5 file that includes all our webpack bundles 
 * in the body using script tags. */
const HtmlWebpackPlugin    = require('html-webpack-plugin');

const helpers              = require('./helpers');
const isDev                = process.env.NODE_ENV !== 'production';

module.exports = {
    entry: {
        vendor: './src/vendor.ts',
        polyfills: './src/polyfills.ts',
        main: isDev ? './src/main.ts' : './src/main.aot.ts'
    },

    resolve: {
        extensions: ['.ts', '.js', '.scss']
    },

    module: {
        /* 
         * sass-loader: loads a Sass/SCSS file and compiles it to CSS. Has a 
         * dependency on node-sass.
         * 
         * css-loader: collects CSS from all the CSS files referenced in the app
         * (and therefore in the dependency tree) and outputs it as a string.
         * 
         * style-loader (dev only): takes the output string generated by the css-loader
         * and places it inside the <style> tags in the index.html file (inline styles).
         *
         * Styles are not minified by default in production mode. The webpack dev server
         * takes our styles and puts them into main.js, and then adds them into our HTML
         * via inline styles (which are slow). To be more efficient, we need to take our
         * styles and move them into a CSS file that can be minified.
         */
        rules: [
            {
                test: /\.html$/,
                loader: 'html-loader'
            },
            {
                test: /\.(scss|sass)$/,
                use: [
                    { loader: 'style-loader', options: { sourceMap: isDev } },
                    { loader: 'css-loader', options: { sourceMap: isDev } },
                    { loader: 'sass-loader', options: { sourceMap: isDev } }
                ],
                include: helpers.root('src', 'assets')
            },
            {
                test: /\.(scss|sass)$/,
                use: [
                    'to-string-loader',
                    { loader: 'css-loader', options: { sourceMap: isDev } },
                    { loader: 'sass-loader', options: { sourceMap: isDev } }
                ],
                include: helpers.root('src', 'app')
            },
            /* Ensures that images will be processed and added to the output directory.
             * Additionally, the image variables will contain the final URL of the image
             * after processing.
             * 
             * When processing images, the loader will recognize them as local files
             * and replace the ./my-image.png path with the final path to the image
             * in the output directory. The html-loader handles <img src="./my-image.png" /> 
             * in the same manner. */
            {
                test: /\.(png|svg|jpg|gif)$/,
                use: [
                    'file-loader'
                ]
            }
        ]
    },

    plugins: [
        /* Remove and clean build folders. By default, it removes all files inside of
         * webpack's output.path directory plus unused webpack assets after every
         * successful build. */
        new CleanWebpackPlugin(
            helpers.root('docs'), { root: helpers.root(), verbose: true }),
        new HtmlWebpackPlugin({
            template: 'src/index.html'
        }),
    ]
};